***********************************************************************************************************************************************
JAVASCRIPT REVIEW NOTES (ADD MORE IF I FIND MORE IMPORTANT JS QUESTIONS)
***********************************************************************************************************************************************

What's the difference between a class component and a functional component?

	- Class Component
		- can manage the state
		- typically used for containers
		- does not receive properties
		- able to use lifecycle hooks (because of inheriting the React Component library)
		
	- Functional Component
		- typically cannot manage the state (however react hooks allow you to manage state in a FC)
		- used for components
		- does receive a set of properties
		- able to use React Hooks

What are some of the lifecycle methods of a React component?

	- the following are the most commonly used
		- componentDidMount
		- componentDidUpdate
		- componentWillUnmount
		- render
		- constructor

What's the difference between a PureComponent and a Component?

	- PureComponent does a SHALLOW COMPARISON on state change
		- when comparing scalar values it compares values but, when comparing objects, it compares only references
			- helps to improve performance
			
	- When to use PureComponent?
		- when state/props is an immutable object
		- when state/props has no hierarchy
		- should call forceUpdate when data changes
	
What's the difference between props and state?

	- PROPS
		- passed to functional components
		
	- STATE
		- managed by class components

What are reference types and what are value types?

	reference types:
		- objects
		- arrays
		- functions
		
	value types:
		- strings
		- numbers
		- booleans
		- null
		- undefined

What does it mean to mutate a reference type?

	- modifying certain properties of an existing object:
		- var obj1 = {
			name: 'Sean',
			age: 25
		};
		obj1.age = 30;
		console.log(obj1); //{ name: 'Sean', age: 30 }

What does it mean to enforce immutability?

	- typically applies to maintaining state in react: 
		- when you modify the state, you are not directly modifying the state object, but rather
		are making a copy of the current state, modifying the copy, then using that copy to update the state. 

What happens if you mutate an object stored in a component's state?

	- there is a possibility that the modifications you have made to "this.state" will be overwritten and will not be reflected upon re-render.

What are hooks? (full disclosure, I don't actually know anything about them because we don't use them yet, but they're the new hotness in React apparently)

	- React hooks allow you to modify state within functional components.
		- Previously were not able to and could only modify state within containers or using Redux.
		- typically have a "useSomething" type of naming, some of the most important:
			- useState
			- useEffect
	
	- Some important rules:
		- only call them at the top level (not inside of loops, conditions, nested functions)
		- only call them from React function components

React Router

	- allows you to define what components will load when a certain url is navigated to:
		- simply wrap your application with the built in React Router
		- ex. <Router><App /></Router>
		- Now routers are as easy to define as: <Link to="/">Home</Link> ... some other code ... <Route path="/" exact component={Index} />
			- When a user clicks on the "Home" link, the router will handle the URL and in turn render the "Index" component.
			- a VERY important tool for creating single-page applications in React.

Redux

	- tool that is SEPARATE FROM REACT that is use to manage state.

    Reducers
	
		- These files catch "dispatch" functions and perform updates to the state based on the action that was dispatched.
	
    Action Creators
	
		- These do exactly as they are named, they create actions that are performed by users when interacting with the application.
			- they dispatch actions that are then handled by the reducers to ultimately modify the state in Redux.
	
    Store
	
		- The state that is managed by redux.
		
    Flux architecture (one-way data flow) ~~~ look into this some more
	
		- defining state and functions that are passed from parents to their children to create a functional application.
			- children are NOT passing state or functions back to their parents.
		
		- In this situation, Redux would be defining all of the state variables/functions and passing them doing to the parents which can then pass them to the children
		(redux can even pass them directly to the children). 

Testing:
    Tools like Enzyme, Jest
	
		- can use jest with enzyme to test components in your react app.
		
    How would you test a component?
	
		- make a shallow copy of the component (renders the component "one level deep" and asserts facts about what its render method returns, without worrying about behavior of child components)
		
			- feed the component mocks of all of the data and functions it is expected to consume.
			
				- validate that when the component consumes certain properties and functions, it renders in its expected way

Build process tools:
    What is Webpack/what does it do? ~~~ look more into this (get an internet dictionary style definition)
	
		- webpack is a compiler tool, essentially takes all of your source files and merges them together to make your application smaller and ultimately increase performance of an application when
		it reaches production
	
    What is Babel/what does it do?
	
		- allows modern Javascript code ES6+ to be compiled into ES5 so it is able to be understood by any browser.
			- certain browsers cannot understand ES6+ code so something like Babel is very important unless you want to be stuck only writing ES5 Javascript.

General JavaScript/ES6

    promises
	
		- when a call is made to perform an asynchronous action that may take a certain amount of time, a promise is returned
			- either results in some data being returned, or an error
				- can be handled by async/await or by using .then and .catch
				
    async/await (not something we use, but it's the new promises apparently)
		
		- method for handling promises
			- can define a function as asynchronous
				- then you can make "await" calls inside of a try block for every asynchronous function
					- ex. async function () {
						try{
							const something = await asyncFunction();
							//all of the code below the await call will wait to run and will run successfully if the function is successful
						}
						catch(error){
							console.log(error)
						}
					}
	
    spread operator
	
		- literally allows you to spread values across function parameters or a new object:
			ex: function(x, y, z){
				//does something
			}
			var arr = [1, 2, 3];
			function(...arr); //spreads the values to their corresponding index argument
			
			or 
			
			var obj1 = { var1: 1, var2: 2, var3: 3 }
			var obj2 = { var4: 4, ...obj1 } //fills three more spots of obj2 with the values of obj1 so it would look like {var4: 4, var1: 1, var2: 2, var3: 3}
			
		- USED VERY OFTEN IN REACT TO ENFORCE IMMUTABILITY OF OBJECTS AND ARRAYS IN STATE
		
    template literals
	
		- method to dynamically pass values to a string in javascript
			- instead of having to use "some sentence with a random variable with value: " + randomVar + " in Javascript!".
			- you can use the backticks ` ` and do the same as above like so: `some sentence with a random variable with value: ${randomVar} in Javascript!`
			
    Array.reduce
	
		- executes a reducer function each element of the array that results in a single output value
			- ex: [0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {
				return accumulator + currentValue;
			});
			- accumulator starts at zero and adds each value of the array one by one until 10 is ultimately returned
			
    Array.map
	
		- method of iterating and performing some sort of action onto each member of an array to ultimately return a new array:
			- randomArrayList.map(randomArrayMember => {
				//do something to randomArrayMember
			})
			
    composition pattern
	
		- design pattern that describes a group of objects that is treated the same way as a single instance of the same type of object.
			example: a file system. there can be one parent directory that contains many files but can also contain more directories. the different objects
			act the same way no matter where they are in the entire structure.
			
				- if i call some function on one directory it should act the same way as if I called it on any other directory. The case is the same with a file itself.
		
    inheritance
	
		- a method for one class to inherit methods and variables from another class.
		
			- most common example in React are class components
				- class MyComponent extends Component
					- This allows MyComponent to be able to use all of the member functions of Component (most importantly being able to use state and the lifecycle hooks)
					
    what a polyfill is
		
		- a piece of code used to provide modern functionality on older browsers that do not natively support it
			- ex: could mimic the functionality of an HTML Canvas element on IE7 using a silverlight plugin.
		- not used exclusively because they reduce functionality and performance
		
    JavaScript modules
        - named exports
		
			- specifying one particular method or class that you'd like to import from another javascript library that contains multiple exports
		
        - default exports
		
			- importing all classes/functions from another javascript library that only has one "export default" statement inside of it
			
    Gotchas
        === vs ==
		
			- === compares value and type whereas == only compares value and can perform type coercion 
				(type coercion being js is smart enough to try different types for the values on both side of the "==", for example it would know that "2"==2 would equal true because
				it would coerce the "2" to a number type and therefore the two sides would be the same type.)
			
        how inheritance and prototypes work
        const vs let vs var
		
			- const
				- never can be modified through reassignment and cannot be redeclared
				- block scope
				
			- let
				- can be modified
				- block scope
				
			- var
				- can be modified
				- global scope
				
				block scope -
					- the variable is only usable inside of the block it is defined in:
						function random(){
							let x =1:
							if(true){
								let x = 2; //BECAUSE IT IS IN THIS BLOCK THIS X HAS A DIFFERENT SCOPE THAN THE PREVIOUS X
								console.log(x) //2
							}
							console.log(x) //1 - BECAUSE THE VALUE OF THE VARIABLE IS 1 IN THIS SCOPE
						}
				global scope -
					- the variable can be referenced inside of any of the child blocks of the block it is defined in:
						function random(){
							var x = 1;
							if(true){
								var x = 2; //BECAUSE OF GLOBAL SCOPE THIS IS RECOGNIZED AS THE SAME X DEFINED IN THE PREVIOUS LINES
								console.log(x); //2
							}
							console.log(x); //2 - BECAUSE THE VARIABLE IS GLOBAL AND WAS RECOGNIZED AS THE SAME X, ITS VALUE WAS ABLE TO BE CHANGED AND CARRIED OUT OF THE OTHER BLOCK
						}
						
        closure
		
			- child functions are able to access parameters passed to parent functions:
			
				function parentFunction(name) {
				
					return function childFunction1(var1){
						return `hello ${var1} my name is ${name}`;
					}
				
				}
				
				const child = parentFunction("john");
				console.log(child("bob")); //hello bob my name is john
				
        general understand of async vs. sync code
		
			- synchronous code is put onto the event stack and runs immediatelly, async code runs on the web apis and then is placed back onto the event stack when it is complete (returning either data or an error)